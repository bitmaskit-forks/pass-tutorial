~~~ step: correct-horse-battery-staple
diff --git a/src/password-store.sh b/src/password-store.sh
new file mode 100644
--- /dev/null
+++ b/src/password-store.sh
@@ -0,0 +1,3 @@
+#!/usr/bin/env bash
+
+echo "correcthorsebatterystaple"

~~~ step: urandom
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -1,3 +1,3 @@
 #!/usr/bin/env bash
 
-echo "correcthorsebatterystaple"
+LC_ALL=C tr -dc "[:graph:]" < /dev/urandom

~~~ step: take
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -1,3 +1,4 @@
 #!/usr/bin/env bash
 
-LC_ALL=C tr -dc "[:graph:]" < /dev/urandom
+read -r -n 25 pass < <(LC_ALL=C tr -dc "[:graph:]" < /dev/urandom)
+echo $pass

~~~ step: variables
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -1,4 +1,7 @@
 #!/usr/bin/env bash
 
-read -r -n 25 pass < <(LC_ALL=C tr -dc "[:graph:]" < /dev/urandom)
+GENERATED_LENGTH="${PASSWORD_STORE_GENERATED_LENGTH:-25}"
+CHARACTER_SET="${PASSWORD_STORE_CHARACTER_SET:-[:graph:]}"
+
+read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
 echo $pass

~~~ step: function
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -3,5 +3,9 @@
 GENERATED_LENGTH="${PASSWORD_STORE_GENERATED_LENGTH:-25}"
 CHARACTER_SET="${PASSWORD_STORE_CHARACTER_SET:-[:graph:]}"
 
-read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
-echo $pass
+cmd_generate() {
+  read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
+  echo $pass
+}
+
+cmd_generate

~~~ step: command
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -8,4 +8,8 @@ cmd_generate() {
   echo $pass
 }
 
-cmd_generate
+case "$1" in
+  generate) shift;           cmd_generate "$@" ;;
+  *)                         echo "Unrecognized command '$1'." ;;
+esac
+exit 0

~~~ step: version
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -3,12 +3,28 @@
 GENERATED_LENGTH="${PASSWORD_STORE_GENERATED_LENGTH:-25}"
 CHARACTER_SET="${PASSWORD_STORE_CHARACTER_SET:-[:graph:]}"
 
+cmd_version() {
+  cat <<-_EOF
+	============================================
+	= pass: the standard unix password manager =
+	=                                          =
+	=                   v1.7                   =
+	=                                          =
+	=             Jason A. Donenfeld           =
+	=               Jason@zx2c4.com            =
+	=                                          =
+	=      http://www.passwordstore.org/       =
+	============================================
+	_EOF
+}
+
 cmd_generate() {
   read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
   echo $pass
 }
 
 case "$1" in
+  version|--version) shift;  cmd_version "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   *)                         echo "Unrecognized command '$1'." ;;
 esac

~~~ step: help
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -18,12 +18,31 @@ cmd_version() {
 	_EOF
 }
 
+cmd_usage() {
+  cmd_version
+  echo
+  cat <<-_EOF
+	Usage:
+	    $PROGRAM generate
+	        Generate a new password.
+	    $PROGRAM help
+	        Show this text.
+	    $PROGRAM version
+	        Show version information.
+
+	More information may be found in the pass(1) man page.
+	_EOF
+}
+
 cmd_generate() {
   read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
   echo $pass
 }
 
+PROGRAM="${0##*/}"
+
 case "$1" in
+  help|--help) shift;        cmd_usage "$@" ;;
   version|--version) shift;  cmd_version "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   *)                         echo "Unrecognized command '$1'." ;;

~~~ step: persist
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -1,8 +1,20 @@
 #!/usr/bin/env bash
 
+PREFIX="${PASSWORD_STORE_DIR:-$HOME/.password-store2}"
 GENERATED_LENGTH="${PASSWORD_STORE_GENERATED_LENGTH:-25}"
 CHARACTER_SET="${PASSWORD_STORE_CHARACTER_SET:-[:graph:]}"
 
+yesno() {
+  [[ -t 0 ]] || return 0
+  local response
+  read -r -p "$1 [y/N] " response
+  [[ $response == [yY] ]] || exit 1
+}
+die() {
+  echo "$@" >&2
+  exit 1
+}
+
 cmd_version() {
   cat <<-_EOF
 	============================================
@@ -35,8 +47,18 @@ cmd_usage() {
 }
 
 cmd_generate() {
+  [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
+  local path="$1"
+  mkdir -p -v "$PREFIX/$(dirname "$path")"
+  local passfile="$PREFIX/$path.txt"
+
+  [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
+
   read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
-  echo $pass
+  echo $pass > $passfile
+
+  printf "\e[1m\e[37mThe generated password for \e[4m%s\e[24m is:\e[0m\n\e[1m\e[93m%s\e[0m\n" \
+         "$path" "$pass"
 }
 
 PROGRAM="${0##*/}"

~~~ step: pass-length
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -35,8 +35,8 @@ cmd_usage() {
   echo
   cat <<-_EOF
 	Usage:
-	    $PROGRAM generate
-	        Generate a new password.
+	    $PROGRAM generate pass-name [pass-length]
+	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
 	    $PROGRAM help
 	        Show this text.
 	    $PROGRAM version
@@ -47,14 +47,15 @@ cmd_usage() {
 }
 
 cmd_generate() {
-  [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
+  [[ $# -ne 2 && $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name [pass-length]"
   local path="$1"
+  local length="${2:-$GENERATED_LENGTH}"
   mkdir -p -v "$PREFIX/$(dirname "$path")"
   local passfile="$PREFIX/$path.txt"
 
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
 
-  read -r -n $GENERATED_LENGTH pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
+  read -r -n $length pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
   echo $pass > $passfile
 
   printf "\e[1m\e[37mThe generated password for \e[4m%s\e[24m is:\e[0m\n\e[1m\e[93m%s\e[0m\n" \

~~~ step: validation
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -14,6 +14,13 @@ die() {
   echo "$@" >&2
   exit 1
 }
+check_sneaky_paths() {
+  local path
+  for path in "$@"; do
+    [[ $path =~ /\.\.$ || $path =~ ^\.\./ || $path =~ /\.\./ || $path =~ ^\.\.$ ]] && \
+      die "Error: You've attempted to pass a sneaky path to pass. Go home."
+  done
+}
 
 cmd_version() {
   cat <<-_EOF
@@ -50,12 +57,15 @@ cmd_generate() {
   [[ $# -ne 2 && $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name [pass-length]"
   local path="$1"
   local length="${2:-$GENERATED_LENGTH}"
+  check_sneaky_paths "$path"
+  [[ ! $length =~ ^[0-9]+$ ]] && die "Error: pass-length \"$length\" must be a number."
   mkdir -p -v "$PREFIX/$(dirname "$path")"
   local passfile="$PREFIX/$path.txt"
 
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
 
   read -r -n $length pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
+  [[ ${#pass} -eq $length ]] || die "Could not generate password from /dev/urandom."
   echo $pass > $passfile
 
   printf "\e[1m\e[37mThe generated password for \e[4m%s\e[24m is:\e[0m\n\e[1m\e[93m%s\e[0m\n" \

~~~ step: show
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -42,6 +42,8 @@ cmd_usage() {
   echo
   cat <<-_EOF
 	Usage:
+	    $PROGRAM show pass-name
+	        Show existing password.
 	    $PROGRAM generate pass-name [pass-length]
 	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
 	    $PROGRAM help
@@ -53,6 +55,21 @@ cmd_usage() {
 	_EOF
 }
 
+cmd_show() {
+  [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
+
+  local path="$1"
+  local passfile="$PREFIX/$path.txt"
+  check_sneaky_paths "$path"
+  if [[ -f $passfile ]]; then
+    cat "$passfile"
+  elif [[ -d $PREFIX/$path ]]; then
+    die "Error: $path is a directory."
+  else
+    die "Error: $path is not in the password store."
+  fi
+}
+
 cmd_generate() {
   [[ $# -ne 2 && $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name [pass-length]"
   local path="$1"
@@ -73,10 +90,12 @@ cmd_generate() {
 }
 
 PROGRAM="${0##*/}"
+COMMAND="$1"
 
 case "$1" in
   help|--help) shift;        cmd_usage "$@" ;;
   version|--version) shift;  cmd_version "$@" ;;
+  show) shift;               cmd_show "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   *)                         echo "Unrecognized command '$1'." ;;
 esac

~~~ step: default
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -42,7 +42,7 @@ cmd_usage() {
   echo
   cat <<-_EOF
 	Usage:
-	    $PROGRAM show pass-name
+	    $PROGRAM [show] pass-name
 	        Show existing password.
 	    $PROGRAM generate pass-name [pass-length]
 	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
@@ -97,6 +97,6 @@ case "$1" in
   version|--version) shift;  cmd_version "$@" ;;
   show) shift;               cmd_show "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
-  *)                         echo "Unrecognized command '$1'." ;;
+  *)                         COMMAND="show"; cmd_show "$@" ;;
 esac
 exit 0

~~~ step: insert
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -44,6 +44,8 @@ cmd_usage() {
 	Usage:
 	    $PROGRAM [show] pass-name
 	        Show existing password.
+	    $PROGRAM insert pass-name
+	        Insert new password.
 	    $PROGRAM generate pass-name [pass-length]
 	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
 	    $PROGRAM help
@@ -70,6 +72,31 @@ cmd_show() {
   fi
 }
 
+cmd_insert() {
+  [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
+  local path="${1%/}"
+  local passfile="$PREFIX/$path.txt"
+  check_sneaky_paths "$path"
+
+  [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwite it?"
+
+  mkdir -p -v "$PREFIX/$(dirname "$path")"
+
+  local password password_again
+  while true; do
+    read -r -p "Enter password for $path: " -s password || exit 1
+    echo
+    read -r -p "Retype password for $path: " -s password_again || exit 1
+    echo
+    if [[ $password == "$password_again" ]]; then
+      echo "$password" > "$passfile"
+      break
+    else
+      die "Error: the entered passwords do not match."
+    fi
+  done
+}
+
 cmd_generate() {
   [[ $# -ne 2 && $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name [pass-length]"
   local path="$1"
@@ -96,6 +123,7 @@ case "$1" in
   help|--help) shift;        cmd_usage "$@" ;;
   version|--version) shift;  cmd_version "$@" ;;
   show) shift;               cmd_show "$@" ;;
+  insert|add) shift;         cmd_insert "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   *)                         COMMAND="show"; cmd_show "$@" ;;
 esac

~~~ step: rm
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -48,6 +48,8 @@ cmd_usage() {
 	        Insert new password.
 	    $PROGRAM generate pass-name [pass-length]
 	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
+	    $PROGRAM rm pass-name
+	        Remove existing password or directory.
 	    $PROGRAM help
 	        Show this text.
 	    $PROGRAM version
@@ -116,6 +118,22 @@ cmd_generate() {
          "$path" "$pass"
 }
 
+cmd_delete() {
+  [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
+  local path="$1"
+  check_sneaky_paths "$path"
+
+  local passdir="$PREFIX/${path%/}"
+  local passfile="$PREFIX/$path.txt"
+  [[ -f $passfile && -d $passdir && $path == */ || ! -f $passfile ]] && passfile="${passdir%/}/"
+  [[ -e $passfile ]] || die "Error: $path is not in the password store."
+
+  yesno "Are you sure you would like to delete $path?"
+
+  rm -r -f -v "$passfile"
+  rmdir -p "${passfile%/*}" 2>/dev/null
+}
+
 PROGRAM="${0##*/}"
 COMMAND="$1"
 
@@ -125,6 +143,7 @@ case "$1" in
   show) shift;               cmd_show "$@" ;;
   insert|add) shift;         cmd_insert "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
+  delete|rm|remove) shift;   cmd_delete "$@" ;;
   *)                         COMMAND="show"; cmd_show "$@" ;;
 esac
 exit 0

~~~ step: mv
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -50,6 +50,8 @@ cmd_usage() {
 	        Generate a new password of pass-length (or $GENERATED_LENGTH if unspecified).
 	    $PROGRAM rm pass-name
 	        Remove existing password or directory.
+	    $PROGRAM mv old-path new-path
+	        Renames or moves old-path to new-path.
 	    $PROGRAM help
 	        Show this text.
 	    $PROGRAM version
@@ -134,6 +136,30 @@ cmd_delete() {
   rmdir -p "${passfile%/*}" 2>/dev/null
 }
 
+cmd_move() {
+  [[ $# -ne 2 ]] && die "Usage: $PROGRAM $COMMAND old-path new-path"
+  check_sneaky_paths "$@"
+  local old_path="$PREFIX/${1%/}"
+  local old_dir="$old_path"
+  local new_path="$PREFIX/$2"
+
+  if ! [[ -f $old_path.txt && -d $old_path && $1 == */ || ! -f $old_path.txt ]]; then
+    old_dir="${old_path%/*}"
+    old_path="${old_path}.txt"
+  fi
+  echo "$old_path"
+  [[ -e $old_path ]] || die "Error: $1 is not in the password store."
+
+  mkdir -p -v "${new_path%/*}"
+  [[ -d $old_path || -d $new_path || $new_path == */ ]] || new_path="${new_path}.txt"
+
+  local interactive="-i"
+  [[ ! -t 0 ]] && interactive="-f"
+
+  mv $interactive -v "$old_path" "$new_path" || exit 1
+  rmdir -p "$old_dir" 2>/dev/null
+}
+
 PROGRAM="${0##*/}"
 COMMAND="$1"
 
@@ -144,6 +170,7 @@ case "$1" in
   insert|add) shift;         cmd_insert "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   delete|rm|remove) shift;   cmd_delete "$@" ;;
+  rename|mv) shift;          cmd_move "$@" ;;
   *)                         COMMAND="show"; cmd_show "$@" ;;
 esac
 exit 0

~~~ step: cp
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -52,6 +52,8 @@ cmd_usage() {
 	        Remove existing password or directory.
 	    $PROGRAM mv old-path new-path
 	        Renames or moves old-path to new-path.
+	    $PROGRAM cp old-path new-path
+	        Copies old-path to new-path.
 	    $PROGRAM help
 	        Show this text.
 	    $PROGRAM version
@@ -136,7 +138,10 @@ cmd_delete() {
   rmdir -p "${passfile%/*}" 2>/dev/null
 }
 
-cmd_move() {
+cmd_copy_move() {
+  local move=1
+  [[ $1 == "copy" ]] && move=0
+  shift
   [[ $# -ne 2 ]] && die "Usage: $PROGRAM $COMMAND old-path new-path"
   check_sneaky_paths "$@"
   local old_path="$PREFIX/${1%/}"
@@ -156,8 +161,12 @@ cmd_move() {
   local interactive="-i"
   [[ ! -t 0 ]] && interactive="-f"
 
-  mv $interactive -v "$old_path" "$new_path" || exit 1
-  rmdir -p "$old_dir" 2>/dev/null
+  if [[ $move -eq 1 ]]; then
+    mv $interactive -v "$old_path" "$new_path" || exit 1
+    rmdir -p "$old_dir" 2>/dev/null
+  else
+    cp $interactive -r -v "$old_path" "$new_path" || exit 1
+  fi
 }
 
 PROGRAM="${0##*/}"
@@ -170,7 +179,8 @@ case "$1" in
   insert|add) shift;         cmd_insert "$@" ;;
   generate) shift;           cmd_generate "$@" ;;
   delete|rm|remove) shift;   cmd_delete "$@" ;;
-  rename|mv) shift;          cmd_move "$@" ;;
+  rename|mv) shift;          cmd_copy_move "move" "$@" ;;
+  copy|cp) shift;            cmd_copy_move "copy" "$@" ;;
   *)                         COMMAND="show"; cmd_show "$@" ;;
 esac
 exit 0

~~~ step: init
diff --git a/src/password-store.sh b/src/password-store.sh
old mode 100644
new mode 100755
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -42,6 +42,8 @@ cmd_usage() {
   echo
   cat <<-_EOF
 	Usage:
+	    $PROGRAM init gpg-id...
+	        Initialize new password storage and use gpg-id for encryption.
 	    $PROGRAM [show] pass-name
 	        Show existing password.
 	    $PROGRAM insert pass-name
@@ -63,6 +65,17 @@ cmd_usage() {
 	_EOF
 }
 
+cmd_init() {
+  [[ $# -lt 1 ]] && die "Usage: $PROGRAM $COMMAND gpg-id..."
+
+  local gpg_id="$PREFIX/.gpg-id"
+
+  mkdir -v -p "$PREFIX"
+  printf "%s\n" "$@" > "$gpg_id"
+  local id_print="$(printf "%s, " "$@")"
+  echo "Password store initialized for ${id_print%, }"
+}
+
 cmd_show() {
   [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
 
@@ -173,6 +186,7 @@ PROGRAM="${0##*/}"
 COMMAND="$1"
 
 case "$1" in
+  init) shift;               cmd_init "$@" ;;
   help|--help) shift;        cmd_usage "$@" ;;
   version|--version) shift;  cmd_version "$@" ;;
   show) shift;               cmd_show "$@" ;;

~~~ step: gpg
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -1,5 +1,11 @@
 #!/usr/bin/env bash
 
+GPG_OPTS=( $PASSWORD_STORE_GPG_OPTS "--quiet" "--yes" "--compress-algo=none" "--no-encrypt-to" )
+GPG="gpg"
+export GPG_TTY="${GPG_TTY:-$(tty 2>/dev/null)}"
+which gpg2 &>/dev/null && GPG="gpg2"
+[[ -n $GPG_AGENT_INFO || $GPG == "gpg2" ]] && GPG_OPTS+=( "--batch" "--use-agent" )
+
 PREFIX="${PASSWORD_STORE_DIR:-$HOME/.password-store2}"
 GENERATED_LENGTH="${PASSWORD_STORE_GENERATED_LENGTH:-25}"
 CHARACTER_SET="${PASSWORD_STORE_CHARACTER_SET:-[:graph:]}"

~~~ step: gpg-winpath
diff --git a/src/platform/cygwin.sh b/src/platform/cygwin.sh
new file mode 100644
--- /dev/null
+++ b/src/platform/cygwin.sh
@@ -0,0 +1,18 @@
+gpg_winpath() {
+  local args=("$@")
+  local could_be_filenames="true"
+  local i
+  for ((i=${#args[@]}-1; i>=0; i--)); do
+    if ( [ $i -gt 0 ] && [ "${args[$i-1]}" = "-o" ] && [ "${args[$i]}" != "-" ] ); then
+      args[$i]="$(cygpath -am "${args[$i]}")"
+    else
+      could_be_filenames="false"
+    fi
+  done
+  $GPG_ORIG "${args[@]}"
+}
+
+if $GPG --help | grep -q 'Home: [A-Z]:[/\\]'; then
+  GPG_ORIG="$GPG"
+  GPG=gpg_winpath
+fi

~~~ step: source-platform
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -28,6 +28,9 @@ check_sneaky_paths() {
   done
 }
 
+source "$(dirname "$0")/platform/$(uname | cut -d _ -f 1 | tr '[:upper:]' '[:lower:]').sh" \
+  2>/dev/null
+
 cmd_version() {
   cat <<-_EOF
 	============================================

~~~ step: gpg-recipients
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -20,6 +20,35 @@ die() {
   echo "$@" >&2
   exit 1
 }
+set_gpg_recipients() {
+  GPG_RECIPIENT_ARGS=( )
+  GPG_RECIPIENTS=( )
+
+  if [[ -n $PASSWORD_STORE_KEY ]]; then
+    for gpg_id in $PASSWORD_STORE_KEY; do
+      GPG_RECIPIENT_ARGS+=( "-r" "$gpg_id" )
+      GPG_RECIPIENTS+=( "$gpg_id" )
+    done
+    return
+  fi
+
+  if [[ ! -f "$PREFIX/.gpg-id" ]]; then
+    cat >&2 <<-_EOF
+	Error: You must run:
+	    $PROGRAM init your-gpg-id
+	before you may use the password store.
+
+	_EOF
+    cmd_usage
+    exit 1
+  fi
+
+  local gpg_id
+  while read -r gpg_id; do
+    GPG_RECIPIENT_ARGS+=( "-r" "$gpg_id" )
+    GPG_RECIPIENTS+=( "$gpg_id" )
+  done < "$PREFIX/.gpg-id"
+}
 check_sneaky_paths() {
   local path
   for path in "$@"; do

~~~ step: txt-to-gpg
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -118,7 +118,7 @@ cmd_show() {
   [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
 
   local path="$1"
-  local passfile="$PREFIX/$path.txt"
+  local passfile="$PREFIX/$path.gpg"
   check_sneaky_paths "$path"
   if [[ -f $passfile ]]; then
     cat "$passfile"
@@ -132,7 +132,7 @@ cmd_show() {
 cmd_insert() {
   [[ $# -ne 1 ]] && die "Usage: $PROGRAM $COMMAND pass-name"
   local path="${1%/}"
-  local passfile="$PREFIX/$path.txt"
+  local passfile="$PREFIX/$path.gpg"
   check_sneaky_paths "$path"
 
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwite it?"
@@ -161,7 +161,7 @@ cmd_generate() {
   check_sneaky_paths "$path"
   [[ ! $length =~ ^[0-9]+$ ]] && die "Error: pass-length \"$length\" must be a number."
   mkdir -p -v "$PREFIX/$(dirname "$path")"
-  local passfile="$PREFIX/$path.txt"
+  local passfile="$PREFIX/$path.gpg"
 
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
 
@@ -179,7 +179,7 @@ cmd_delete() {
   check_sneaky_paths "$path"
 
   local passdir="$PREFIX/${path%/}"
-  local passfile="$PREFIX/$path.txt"
+  local passfile="$PREFIX/$path.gpg"
   [[ -f $passfile && -d $passdir && $path == */ || ! -f $passfile ]] && passfile="${passdir%/}/"
   [[ -e $passfile ]] || die "Error: $path is not in the password store."
 
@@ -199,15 +199,15 @@ cmd_copy_move() {
   local old_dir="$old_path"
   local new_path="$PREFIX/$2"
 
-  if ! [[ -f $old_path.txt && -d $old_path && $1 == */ || ! -f $old_path.txt ]]; then
+  if ! [[ -f $old_path.gpg && -d $old_path && $1 == */ || ! -f $old_path.gpg ]]; then
     old_dir="${old_path%/*}"
-    old_path="${old_path}.txt"
+    old_path="${old_path}.gpg"
   fi
   echo "$old_path"
   [[ -e $old_path ]] || die "Error: $1 is not in the password store."
 
   mkdir -p -v "${new_path%/*}"
-  [[ -d $old_path || -d $new_path || $new_path == */ ]] || new_path="${new_path}.txt"
+  [[ -d $old_path || -d $new_path || $new_path == */ ]] || new_path="${new_path}.gpg"
 
   local interactive="-i"
   [[ ! -t 0 ]] && interactive="-f"

~~~ step: encrypt
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -138,6 +138,7 @@ cmd_insert() {
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwite it?"
 
   mkdir -p -v "$PREFIX/$(dirname "$path")"
+  set_gpg_recipients
 
   local password password_again
   while true; do
@@ -146,7 +147,8 @@ cmd_insert() {
     read -r -p "Retype password for $path: " -s password_again || exit 1
     echo
     if [[ $password == "$password_again" ]]; then
-      echo "$password" > "$passfile"
+      $GPG -e "${GPG_RECIPIENT_ARGS[@]}" -o "$passfile" "${GPG_OPTS[@]}" <<< "$password" \
+	|| die "Password encryption aborted."
       break
     else
       die "Error: the entered passwords do not match."
@@ -161,13 +163,15 @@ cmd_generate() {
   check_sneaky_paths "$path"
   [[ ! $length =~ ^[0-9]+$ ]] && die "Error: pass-length \"$length\" must be a number."
   mkdir -p -v "$PREFIX/$(dirname "$path")"
+  set_gpg_recipients
   local passfile="$PREFIX/$path.gpg"
 
   [[ -e $passfile ]] && yesno "An entry already exists for $path. Overwrite it?"
 
   read -r -n $length pass < <(LC_ALL=C tr -dc "$CHARACTER_SET" < /dev/urandom)
   [[ ${#pass} -eq $length ]] || die "Could not generate password from /dev/urandom."
-  echo $pass > $passfile
+  $GPG -e "${GPG_RECIPIENT_ARGS[@]}" -o "$passfile" "${GPG_OPTS[@]}" <<<"$pass" \
+    || die "Password encryption aborted."
 
   printf "\e[1m\e[37mThe generated password for \e[4m%s\e[24m is:\e[0m\n\e[1m\e[93m%s\e[0m\n" \
          "$path" "$pass"

~~~ step: decrypt
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -121,7 +121,7 @@ cmd_show() {
   local passfile="$PREFIX/$path.gpg"
   check_sneaky_paths "$path"
   if [[ -f $passfile ]]; then
-    cat "$passfile"
+    $GPG -d "${GPG_OPTS[@]}" "$passfile" || exit $?
   elif [[ -d $PREFIX/$path ]]; then
     die "Error: $path is a directory."
   else

~~~ step: reencrypt-path
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -49,6 +49,43 @@ set_gpg_recipients() {
     GPG_RECIPIENTS+=( "$gpg_id" )
   done < "$PREFIX/.gpg-id"
 }
+reencrypt_path() {
+  local prev_gpg_recipients="" gpg_keys="" current_keys="" index passfile
+  local groups="$($GPG $PASSWORD_STORE_GPG_OPTS --list-config --with-colons | grep "^cfg:group:.*")"
+  while read -r -d "" passfile; do
+    local passfile_dir="${passfile%/*}"
+    passfile_dir="${passfile_dir#$PREFIX}"
+    passfile_dir="${passfile_dir#/}"
+    local passfile_display="${passfile#$PREFIX/}"
+    passfile_display="${passfile_display%.gpg}"
+    local passfile_temp="${passfile}.tmp.${RANDOM}.${RANDOM}.${RANDOM}.${RANDOM}.--"
+
+    set_gpg_recipients "$passfile_dir"
+    if [[ $prev_gpg_recipients != "${GPG_RECIPIENTS[*]}" ]]; then
+      for index in "${!GPG_RECIPIENTS[@]}"; do
+        local group="$(sed -n "s/^cfg:group:$(sed 's/[\/&]/\\&/g' \
+	  <<<"${GPG_RECIPIENTS[$index]}"):\\(.*\\)\$/\\1/p" <<<"$groups" | head -n 1)"
+        [[ -z $group ]] && continue
+        IFS=";" eval 'GPG_RECIPIENTS+=( $group )' # http://unix.stackexchange.com/a/92190
+        unset GPG_RECIPIENTS[$index]
+      done
+      gpg_keys="$($GPG $PASSWORD_STORE_GPG_OPTS --list-keys --with-colons "${GPG_RECIPIENTS[@]}" \
+	| sed -n 's/sub:[^:]*:[^:]*:[^:]*:\([^:]*\):[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:[a-zA-Z]*e[a-zA-Z]*:.*/\1/p' \
+        | LC_ALL=C sort -u)"
+    fi
+    current_keys="$($GPG $PASSWORD_STORE_GPG_OPTS -v --no-secmem-warning --no-permission-warning \
+                    --decrypt --list-only --keyid-format long "$passfile" 2>&1 \
+                    | cut -d ' ' -f 5 | LC_ALL=C sort -u)"
+
+    if [[ $gpg_keys != "$current_keys" ]]; then
+      echo "$passfile_display: reencrypting to ${gpg_keys//$'\n'/ }"
+      $GPG -d "${GPG_OPTS[@]}" "$passfile" \
+	| $GPG -e "${GPG_RECIPIENT_ARGS[@]}" -o "$passfile_temp" "${GPG_OPTS[@]}" \
+	&& mv "$passfile_temp" "$passfile" || rm -f "$passfile_temp"
+    fi
+    prev_gpg_recipients="${GPG_RECIPIENTS[*]}"
+  done < <(find "$1" -path '*/.git' -prune -o -iname '*.gpg' -print0)
+}
 check_sneaky_paths() {
   local path
   for path in "$@"; do

~~~ step: init-reencrypt
diff --git a/src/password-store.sh b/src/password-store.sh
--- a/src/password-store.sh
+++ b/src/password-store.sh
@@ -119,6 +119,7 @@ cmd_usage() {
 	Usage:
 	    $PROGRAM init gpg-id...
 	        Initialize new password storage and use gpg-id for encryption.
+		Reencrypt existing passwords using new gpg-id.
 	    $PROGRAM [show] pass-name
 	        Show existing password.
 	    $PROGRAM insert pass-name
@@ -149,6 +150,8 @@ cmd_init() {
   printf "%s\n" "$@" > "$gpg_id"
   local id_print="$(printf "%s, " "$@")"
   echo "Password store initialized for ${id_print%, }"
+
+  reencrypt_path "$PREFIX/"
 }
 
 cmd_show() {
